import random


# Generates a random binary number with k bits
def random_message(k):
    random_number = 0

    for i in range(1, k+1):
        random_number *= 10
        random_number = random_number + random.randint(0, 1)

    #print(random_number)
    return random_number

def crc(msg, div, code):
    """Cyclic Redundancy Check

    Generates an error detecting code based on an inputted message
    and divisor in the form of a polynomial representation.

    Arguments:
        msg: The input message of which to generate the output code.
        div: The divisor in polynomial form. For example, if the polynomial
            of x^3 + x + 1 is given, this should be represented as '1011' in
            the div argument.
        code: This is an option argument where a previously generated code may
            be passed in. This can be used to check validity. If the inputted
            code produces an outputted code of all zeros, then the message has
            no errors.

    Returns:
        An error-detecting code generated by the message and the given divisor.
    """
    # Append the code to the message
    msg = msg + code

    # Convert msg and div into list form for easier handling
    msg = list(msg)
    div = list(div)

    # Loop over every message bit (minus the appended code)
    for i in range(len(msg)-len(code)):
        # If that messsage bit is 1, perform modulo 2 multiplication
        if msg[i] == '1':
            for j in range(len(div)):
                # Perform modulo 2 multiplication on each index of the divisor
                msg[i+j] = str((int(msg[i+j])+int(div[j]))%2)

    # Output the last error-checking code portion of the message generated
    return ''.join(msg[-len(code):])

# Bit error rate = 10^-3: Take message and with 1 in 1000 chance changes a bit in the message
def ber(mesg):
    mesg = list(mesg)
    for i in range(len(msg)):
        k = random.randint(0, 1000)
        if k == 1000:
            if mesg[i] == '1':
                mesg[i] = '0'
            else:
                mesg[i] = '1'
    return ''.join(mesg)





div = raw_input("Dwse  duadiko aritmho")
li = []
actual = 0
for k in range(0,10000):
    msg = str(random_message(10))

    codelength = '0'*(len(div)-1)

    code = crc(msg, div, codelength)

    T = msg + code

    berT = ber(T)
    messageforcheck = berT[0:len(msg)]
    codeforcheck = berT[-len(code):]
    if berT == T:
        actual += 1

    li.append(crc(messageforcheck, div, codeforcheck))

numberofcorrectmessages = li.count('0'*(len(div)-1))
per = 10000 - numberofcorrectmessages
actual = 10000-actual
print ("To pososto sfamlenwn minimaton pou anixneftikan apo ton CRC einai :", per/100.0, "%")
print ("To pososto pou ftanei me sfalma ston apodekth kai den anixnevetai apo ton CRC einai:", (actual-per)/100.0, "%")













